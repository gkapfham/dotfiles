# Shell {{{

# Set the default shell
set-option -g default-shell /usr/sbin/zsh

# Set the terminal to tmux-256color, supporting italics and bold
set -g default-terminal "tmux-256color"

# Enable true color support for better color highlighting
set -ga terminal-overrides ",*256col*:Tc"
set -ga terminal-overrides ",tmux-256color*:Tc"

# Configure the tmux session to allow the terminal and nvim to display different cursors for different modes
set -g -a terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

# Shorten command delay
set -sg escape-time 1

# }}}

# Mouse {{{

# Enable mouse support
set -g mouse on

# }}}

# Events {{{

# Enable focus events for Vim
set-option -g focus-events on

# }}}

# Display {{{

# Disable sound bell
set -g bell-action none

# Disable visual bell
set -g visual-bell off

# Update the status information
set -g status-interval 1

# }}}

# Keyboard Bindings {{{

# Remap prefix to Control + a
set -g prefix C-a
unbind C-a
bind C-a send-prefix

# Change the keys for splitting horizontally and vertically; this also starts in the current path
unbind-key %
unbind-key '"'
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Change the binding for the new window so that it starts in the current path
bind-key c new-window -c "#{pane_current_path}"

# Force a reload of the config file
unbind r
bind-key r source-file ~/.tmux.conf \; display-message "Reloading ~/.tmux.conf"

# }}}

# Colors {{{

# When tmux flashes a message, use this color scheme for improved readability
set -g message-style bg=colour238,fg=colour15,bright

# Default statusbar colors
set -g status-style bg=default,fg=colour234,default

# Set window title list colors
set-window-option -g window-status-style fg=colour246,bg=default

# Set active window title colors
set-window-option -g window-status-current-style fg=colour246,bg=default,bright

# }}}

# Windows {{{

# Terminal emulator window title
set -g set-titles on
set -g set-titles-string '  #S'

# Highlight the active window
setw -g automatic-rename on

# }}}

# Panes {{{

# Display the title of the pane
set -g pane-border-status top

# Make the textual label on the border display in bold
set -g pane-active-border-style fg=green,bright

# Enter immersive mode and do not display the pane
bind i run 'zsh -c "arr=( off top ) && tmux setw pane-border-status \${arr[\$(( \${arr[(I)#{pane-border-status}]} % 3 + 1 ))]}"'

# Specify the format of the pane title
set -g pane-border-format "#{pane_index} #T #{pane_current_command}"

# }}}

# Statusbar {{{

# Start configuration of the statusbar
# Include configurations for the left and right sides of statusbar
# Note that these statusbar settings only work with Nerd Fonts
set -g status-justify "left"
set -g status "on"
set -wg mode-style bg=colour238,fg=colour15

# Further configuration of the statusbar colors and contents
set -g status-right-length "88"
set -g status-left-length "112"
setw -g window-status-separator ""

# Note that the window list will follow directly after the "Location:" label

# Full left status bar used in normal circumstances:
set -g status-left '#[fg=colour246]  Session: #S #[fg=colour246]  Window: #I   Pane: #P   Flags: #F   Location: '

# Abbreviated left status bar used during video recording and streaming:
# set -g status-left '#[fg=colour246]  Session: #S'

# Full left status bar used in normal circumstances:
# set -g status-right '#[fg=colour246,align=right]  %a %b %d %Y %r '
set -g status-right '#[fg=colour246,align=right]  %a %b %d %Y %R'

# Abbreviated right status bar used during video recording and streaming:
# set -g status-right ''

# }}}

# Vim Keyboard Bindings {{{

# Resize the current pane by three cells in specified direction
bind f resize-pane -L 3
bind g resize-pane -R 3
bind t resize-pane -U 3
bind b resize-pane -D 3

# Move around panes with j and k, a bit like Vim
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Vim style movement
setw -g mode-keys vi
bind-key -Tcopy-mode-vi 'v' send -X begin-selection
bind-key -Tcopy-mode-vi 'y' send -X copy-pipe-and-cancel "xclip -i -sel c"
unbind ]
bind p paste-buffer

# }}}

# Clipboard {{{

# Copy into clipboard
bind C-y choose-buffer "run \"tmux save-buffer -b '%%' - | xsel -i -b\""

# Paste from clipboard
bind C-p run "xsel -ob | tmux load-buffer - ; tmux paste-buffer "

# }}}

# Popup {{{

# Start a popup window that persists
# across all of the tmux sessions
bind-key u run-shell 'popuptmux'

# }}}

# Plugins {{{

# Install the plugin manager
set -g @plugin 'tmux-plugins/tpm'

# Install all of these plugins
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'fszymanski/tmux-urlscan'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin '27medkamal/tmux-session-wizard'

# Configure the tmux-session-wizard to use a
# different keybinding after using the prefix
unbind t
set -g @session-wizard 't'

# Plugin Reminders:
#
# tmux-copycat:
#
# --> <CTRL>-a + / : searches
# --> n : search "up" the screen
# --> N : search "down" the screen
# --> <Enter> : select the text
#
# --> <CTRL>-a and then <CTRL>-u : searches for and highlights URLs
# --> <Enter> : select the current URL
# --> n : search "up" the screen
# --> N : search "down" the screen

# Summary of tmux-copycat commands:

# https://github.com/tmux-plugins/tmux-copycat

# <CTRL>-a + <CTRL>-f - simple file search
# <CTRL>-a + <CTRL>-g - jumping over git status files (best used after git status command)
# <CTRL>-a + <CTRL>-h - jumping over SHA-1/SHA-256 hashes (best used after git log command)
# <CTRL>-a + <CTRL>-u - URL search (http, ftp and git urls)
# <CTRL>-a + <CTRL>-d - number search (mnemonic d, as digit)
# <CTRL>-a + <ALT>-i  - IP address search

# tmux-urlscan:
#
# --> <CTRL>-a + u : display the available URLs
# --> <Enter> with urlscan to display in browser

# Reminder:
#
# --> tmux-copycat provides the best integration with no flashing on the screen.
# With that said, using tmux-urlscan can also pick up email addresses and other
# web-related entities.

# Reminder:
#
# --> tmux-copycat only performs a selection of the URL on the screen, whereas
# tmux-urlscan will actually pop up a window that will let you select the URL
# and then send it to the active browser.

# Reminder:
#
# --> <CTRL>-a + I : will:
#     -- Install new plugins from GitHub
#     -- Refresh the TMUX environment

# Initialize TMUX plugin manager
run '~/.tmux/plugins/tpm/tpm'


# }}}
